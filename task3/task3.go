// Текст задания:
// Дана последовательность чисел: 2,4,6,8,10. Найти сумму их квадратов(22+32+42….) с использованием конкурентных вычислений.
package task3

import "fmt"

// Функция для рассчет квадрата числа
func squareInt(num int, intChannel chan int) {
	square := num * num
	intChannel <- square
}

func Task3() {
	// Создаем массив из задания
	numbers := [5]int{2, 4, 6, 8, 10}
	// Создаем переменную, которая будет хранить сумму квадратов
	sum := 0
	// Создаем канал для передачи данных между горутинами
	// Во время чтения и записи(i/o) из/в канал горутина блокируется(mutex)
	intChannel := make(chan int)
	// Для каждого числа запускаем отдельную горутину
	for _, num := range numbers {
		go squareInt(num, intChannel)

		sum += <-intChannel
	}
	// У нас len(numbers) = 5, поэтому будет всего 5 сообщений в канал.
	// Но главная горутина main() будет ожидать сообщения дальше -
	// произойдет дедлок(dead lock). Чтобы его избежать, закрываем канал после выполнения цикла.
	close(intChannel)
	// Именно из-за того, что у нас запускается несколько горутин - результат вывода в терминал непредсказуем(почти)
	// Выводим сумму в терминал
	fmt.Println(sum)
}
