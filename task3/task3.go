// Текст задания:
// Дана последовательность чисел: 2,4,6,8,10. Найти сумму их квадратов(22+32+42….) с использованием конкурентных вычислений.
package task3

import (
	"fmt"
	"sync"
)

// Функция для рассчет квадрата числа
func squareInt(num int, intChannel chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	square := num * num
	intChannel <- square
}

func Task3() {
	// Создаем массив из задания
	numbers := [5]int{2, 4, 6, 8, 10}
	// Создаем переменную, которая будет хранить сумму квадратов
	sum := 0
	// Создаем группу ожидания
	var wg sync.WaitGroup
	// Создаем канал для передачи данных между горутинами
	// Во время чтения и записи(i/o) из/в канал горутина блокируется(mutex)
	intChannel := make(chan int)
	// Для каждого числа запускаем отдельную горутину
	for _, num := range numbers {
		wg.Add(1)
		go squareInt(num, intChannel, &wg)
	}
	// Запускаем отдельную горутину, которая ждет группу и закрывает канал,
	// когда группа доделала работу
	go func() {
		wg.Wait()
		close(intChannel)
	}()
	// Читаем канал и добавляем в sum все квадраты
	for number := range intChannel {
		sum += number
	}
	// Именно из-за того, что у нас запускается несколько горутин - последовательность вывода в терминал непредсказуема
	// Выводим сумму в терминал
	fmt.Println(sum)
}
